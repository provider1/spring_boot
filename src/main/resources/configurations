


#spring.datasource.url=jdbc:mysql://localhost:3306/Store?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.datasource.url=jdbc:mariadb://localhost:3306/Store?createDatabaseIfNotExist=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB106Dialect
#spring.datasource.username=root
#spring.datasource.password=root
#server.port=8080
#welcome.message = Welcome to our welcome page !!


#update will attempt to add new columns, constraints, etc.
# but will never remove a column or constraint that may have existed previously
# but no longer does as part of the object model from a prior run.
#spring.jpa.hibernate.ddl-auto=update





#spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
#spring.servlet.multipart.file-size-threshold=2MB

#spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB
#spring.main.allow-circular-references=true
#spring.security.strategy = MODE_INHERITABLETHREADLOCAL

######################---- show jpa Queries ----######################
#spring.jpa.show-sql = true
#spring.jpa.properties.hibernate.format_sql=true

######################---- formatting ----######################
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#logging.level.org.hibernate.SQL=DEBUG

######################---- Log the values ----######################
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#logging.level.org.hibernate.type=trace


#logging.level.com=INFO


######################----  H2 Database ----######################
# Hikari configuration prints details about your data source,
# for example, if you are using MySql, MariaDB or H2 database, and also prints the details of the database
#logging.level.com.zaxxer.hikari.HikariConfig=DEBUG


# Prints your datasource's URI and notify you if there is any datasource available
#spring.h2.console.enabled =true

#When we use H2 as datasource , Spring will generate random "datasource URI" for us,
#we can change that behavior and also will choose an uri name by our choice
#spring.datasource.generate-unique-name =false
#spring.datasource.name =zwer


######################----  Oauth2 ----######################

#spring.security.oauth2.client.registration.github.client-id=788fb37da7b724126be1
#spring.security.oauth2.client.registration.github.client-secret=6b1f99d5a0118251bd945863feeccd60d9bd8eb3

#spring.security.oauth2.client.registration.google.client-id=917136534710-joj0op76tk4qt916bi1g0cgdfmv1e6i4.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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

#spring.security.oauth2.client.provider.myprovider.authorization-uri=<some uri>
#spring.security.oauth2.client.provider.myprovider.token-uri=<some uri>


######################----  Inject Sql Statements ----######################

#sql.scripts.create.customer= insert into customer () values();
# to approach this method of SQL Queries, You have to combine it with @Value() annotation , also JDBCTemplate().execute()
